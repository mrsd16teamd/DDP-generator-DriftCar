gradef(abs(xxxx), if xxxx>0 then 1 else -1);

x: [x_, y_, phi, Ux, Uy, r, pthr, psteer, dthr, dsteer];
u: [thr, steer];

tire_dyn(Fz,Ux,thr,alpha):=
block([K,gamma,F,Fx,Fy],
    K:(thr-Ux)/(abs(Ux)+1e-3),

    reverse:1,
    
    if K<0
    then (reverse:-1, K:abs(K)),

    if abs(alpha)>%pi/2
    then alpha: (%pi-abs(alpha))*(alpha/abs(alpha)),

    gamma: sqrt(c_x^2*(K/(1+K))^2+c_a^2*(tan(alpha)/(1+K))^2),

    F: 
    if gamma <= 3*mu*Fz
    then gamma - 1/(3*mu*Fz)*(2-mu_s/mu)*gamma^2 + 1/(9*mu^2*Fz^2)*(1-(2/3)*(mu_s/mu))*gamma^3
    else mu_s*Fz,

    if '(gamma=0)
    then (Fx: 0, Fy: 0)
    else
    (Fx: c_x/gamma * (K/(1+K)) * F * reverse,
    Fy: -c_a/gamma * (tan(alpha)/(1+K)) * F),

[Fx,Fy]
);

dx(x,u) :=
block([x_, y_, phi, Ux, Uy, r, thr, steer, 
K, Fxf, Fyf, Fxr, Fyr, 
dr, dUx, dUy, U, dx, dy],
    [x_, y_, phi, Ux, Uy, r]: x,
    [thr, steer]: u,

    alpha_F: 
    if Ux >= 0
    then atan((Uy+a*r)/(abs(Ux)+1e-3))-steer
    else atan((Uy+a*r)/(abs(Ux)+1e-3))+steer,

    alpha_R: atan((Uy-b*r)/(abs(Ux)+1e-3)),

    [Fxf,Fyf]: tire_dyn(G_f,Ux,Ux,alpha_F),
    [Fxr,Fyr]: tire_dyn(G_r,Ux,thr,alpha_R),

    dr: (a*Fyf*cos(steer)-b*Fyr)/Iz,
    dUx: (Fxr-Fyf*sin(steer))/m+r*Uy,
    dUy: (Fyf*cos(steer)+Fyr)/m-r*Ux,

    U: sqrt(Ux^2+Uy^2+1e-6),

    beta:
    if Ux<0 and Uy>0
    then %pi-atan(Uy/(abs(Ux)+1e-3))
    else if Ux<0 and Uy<0
    then -%pi-atan(Uy/(abs(Ux)+1e-3))
    else atan(Uy/(abs(Ux)+1e-3)),

    dx: U*cos(beta+phi),
    dy: U*sin(beta+phi),

[dx,dy,r,dUx,dUy,dr]
);

[s1,s2,s3,s4,s5,s6]: dx([x_,y_,phi,Ux,Uy,r],[thr,steer]);
f[x_]: x_ + 's1*h;
f[y_]: y_ + 's2*h;
f[phi]: phi + 's3*h;
f[Ux]: Ux + 's4*h;
f[Uy]: Uy + 's5*h;
f[r]: r + 's6*h;
f[pthr]: thr;
f[psteer]: steer;
f[dthr]: thr-pthr;
f[dsteer]: steer-psteer;


sqrtabs(x, e):= sqrt(x^2 + e^2) - e;

dist2obs: sqrt((x_-Obs[0])^2 + (y_-Obs[1])^2 +1e-6);
velnorm: sqrt(Ux^2+Uy^2+1e-6);
Ustatic: 
if dist2obs > d_thres
then 0
else (1/dist2obs - 1/d_thres)^2;

Udynamic: if (x_-Obs[0])*Ux +(y_-Obs[1])*Uy <0
then 0
else ((x_-Obs[0])*Ux +(y_-Obs[1])*Uy)/(dist2obs*velnorm);



F: cf[0]*sqrtabs(x_-xDes[0], pf[0])  + cf[1]*sqrtabs(y_-xDes[1], pf[1])  + cf[2]*sqrtabs(phi-xDes[2], pf[2])  + cf[3]*sqrtabs(Ux-xDes[3], pf[3]) + cf[4]*sqrtabs(Uy-xDes[4], pf[4]) + cf[5]*sqrtabs(r-xDes[5], pf[5]);
L: cu[0]*thr^2 + cu[1]*steer^2 
+ cdu[0]*dthr^2 + cdu[1]*dsteer^2 
+ cx[0]*sqrtabs(x_-xDes[0], px[0]) + cx[1]*sqrtabs(y_-xDes[1], px[1]) + cx[2]*sqrtabs(phi-xDes[2], px[2]) 
+ cdx[0]*sqrtabs(Ux-xDes[3], px[0]) + cdx[1]*sqrtabs(Uy-xDes[4], px[1]) + cdx[2]*sqrtabs(r-xDes[5], px[2]) 
+ cdrift*(sqrtabs(x[4], 1)-0.2) + k_pos*Ustatic + k_vel*Udynamic;

h[1]: -thr + limThr[0]; 
h[2]: thr - limThr[1]; 
h[3]: -steer + limSteer[0]; 
h[4]: steer - limSteer[1]; 

